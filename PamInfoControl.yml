- name: Parse and export pam.d common-password, common-auth and login.defs information
  hosts: giss
  become: yes
  tasks:

    - name: Read the /etc/pam.d/common-password file
      slurp:
        src: /etc/pam.d/common-password
      register: common_password_content

    - name: Parse the content of common-password
      set_fact:
        pam_password_parameters:
          retry: "{{ common_password_content.content | b64decode | regex_findall('pam_cracklib\\.so.*retry=([0-9-]+)') | first | default('') }}"
          difok: "{{ common_password_content.content | b64decode | regex_findall('pam_cracklib\\.so.*difok=([0-9-]+)') | first | default('') }}"
          minlen: "{{ common_password_content.content | b64decode | regex_findall('pam_cracklib\\.so.*minlen=([0-9-]+)') | first | default('') }}"
          lcredit: "{{ common_password_content.content | b64decode | regex_findall('pam_cracklib\\.so.*lcredit=([0-9-]+)') | first | default('') }}"
          ucredit: "{{ common_password_content.content | b64decode | regex_findall('pam_cracklib\\.so.*ucredit=([0-9-]+)') | first | default('') }}"
          dcredit: "{{ common_password_content.content | b64decode | regex_findall('pam_cracklib\\.so.*dcredit=([0-9-]+)') | first | default('') }}"
          ocredit: "{{ common_password_content.content | b64decode | regex_findall('pam_cracklib\\.so.*ocredit=([0-9-]+)') | first | default('') }}"

    - name: Read the /etc/pam.d/common-auth file
      slurp:
        src: /etc/pam.d/common-auth
      register: common_auth_content

    - name: Parse the content of common-auth
      set_fact:
        pam_auth_parameters:
          deny: "{{ common_auth_content.content | b64decode | regex_findall('pam_tally\\.so.*deny=([0-9]+)') | first | default('') }}"
          lock_time: "{{ common_auth_content.content | b64decode | regex_findall('pam_tally\\.so.*lock_time=([0-9]+)') | first | default('') }}"
          unlock_time: "{{ common_auth_content.content | b64decode | regex_findall('pam_tally\\.so.*unlock_time=([0-9]+)') | first | default('') }}"

    - name: Initialize login_defs_info fact
      set_fact:
        login_defs_info: {}

    - name: Read /etc/login.defs
      shell:
        cmd: grep -E '^((PASS_MIN_DAYS|PASS_MAX_DAYS|PASS_WARN_AGE|LOGIN_RETRIES|LOGIN_TIMEOUT))' /etc/login.defs
      register: login_defs_output
      ignore_errors: yes

    - name: Parse output to dictionary
      set_fact:
        login_defs_info: "{{ login_defs_info | combine({item.split()[0]: item.split()[1]}) }}"
      loop: "{{ login_defs_output.stdout_lines }}"
      when: item.split()[0] in ['PASS_MIN_DAYS', 'PASS_MAX_DAYS', 'PASS_WARN_AGE', 'LOGIN_RETRIES', 'LOGIN_TIMEOUT']

    - name: Combine all parameters
      set_fact:
        combined_params:
          pam_password_parameters: "{{ pam_password_parameters }}"
          pam_auth_parameters: "{{ pam_auth_parameters }}"
          login_defs_info: "{{ login_defs_info }}"

    - name: Debug combined parameters
      debug:
        var: combined_params

    - name: Save combined parameters to JSON on remote machine
      copy:
        content: "{{ combined_params | to_nice_json }}"
        dest: /tmp/combined_info.json

    - name: Fetch JSON file to local machine
      fetch:
        src: /tmp/combined_info.json
        dest: /tmp/combined_info.json
        flat: yes

    - name: Debug combined parameters from file
      debug:
        msg: "{{ lookup('file', '/tmp/combined_info.json') }}"
      delegate_to: localhost